Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> chip_instructions
Rule 1     chip_instructions -> chip_definition
Rule 2     chip_instructions -> command
Rule 3     chip_instructions -> chip_instructions chip_definition
Rule 4     chip_instructions -> chip_instructions command
Rule 5     command -> run_command
Rule 6     run_command -> RUN NAME
Rule 7     run_command -> run_command BINNUM
Rule 8     chip_definition -> chip_declaration chip_logic
Rule 9     chip_declaration -> NAME chip_io CHIP_FUNC_OP chip_io
Rule 10    chip_logic -> OPEN_BRACE chip_statements CLOSE_BRACE
Rule 11    chip_statements -> chip_statement
Rule 12    chip_statements -> chip_statements chip_statement
Rule 13    chip_statement -> NAME chip_io CHIP_FUNC_OP chip_io
Rule 14    chip_io -> OPEN_PARENS name_sequence CLOSE_PARENS
Rule 15    chip_io -> OPEN_PARENS CLOSE_PARENS
Rule 16    name_sequence -> NAME
Rule 17    name_sequence -> indexing_name
Rule 18    name_sequence -> array_init
Rule 19    name_sequence -> name_sequence NAME
Rule 20    name_sequence -> name_sequence indexing_name
Rule 21    name_sequence -> name_sequence array_init
Rule 22    indexing_name -> NAME OPEN_SQUARE NUMBER CLOSE_SQUARE
Rule 23    indexing_name -> NAME OPEN_SQUARE NUMBER COLON NUMBER CLOSE_SQUARE
Rule 24    indexing_name -> NAME OPEN_SQUARE COLON NUMBER CLOSE_SQUARE
Rule 25    array_init -> NAME OPEN_SQUARE DOLLAR NUMBER CLOSE_SQUARE

Terminals, with rules where they appear

BINNUM               : 7
CHIP_FUNC_OP         : 9 13
CLOSE_BRACE          : 10
CLOSE_PARENS         : 14 15
CLOSE_SQUARE         : 22 23 24 25
COLON                : 23 24
DOLLAR               : 25
NAME                 : 6 9 13 16 19 22 23 24 25
NUMBER               : 22 23 23 24 25
OPEN_BRACE           : 10
OPEN_PARENS          : 14 15
OPEN_SQUARE          : 22 23 24 25
RUN                  : 6
error                : 

Nonterminals, with rules where they appear

array_init           : 18 21
chip_declaration     : 8
chip_definition      : 1 3
chip_instructions    : 3 4 0
chip_io              : 9 9 13 13
chip_logic           : 8
chip_statement       : 11 12
chip_statements      : 10 12
command              : 2 4
indexing_name        : 17 20
name_sequence        : 14 19 20 21
run_command          : 5 7

Parsing method: LALR

state 0

    (0) S' -> . chip_instructions
    (1) chip_instructions -> . chip_definition
    (2) chip_instructions -> . command
    (3) chip_instructions -> . chip_instructions chip_definition
    (4) chip_instructions -> . chip_instructions command
    (8) chip_definition -> . chip_declaration chip_logic
    (5) command -> . run_command
    (9) chip_declaration -> . NAME chip_io CHIP_FUNC_OP chip_io
    (6) run_command -> . RUN NAME
    (7) run_command -> . run_command BINNUM

    NAME            shift and go to state 2
    RUN             shift and go to state 3

    chip_declaration               shift and go to state 1
    command                        shift and go to state 4
    chip_instructions              shift and go to state 5
    chip_definition                shift and go to state 6
    run_command                    shift and go to state 7

state 1

    (8) chip_definition -> chip_declaration . chip_logic
    (10) chip_logic -> . OPEN_BRACE chip_statements CLOSE_BRACE

    OPEN_BRACE      shift and go to state 9

    chip_logic                     shift and go to state 8

state 2

    (9) chip_declaration -> NAME . chip_io CHIP_FUNC_OP chip_io
    (14) chip_io -> . OPEN_PARENS name_sequence CLOSE_PARENS
    (15) chip_io -> . OPEN_PARENS CLOSE_PARENS

    OPEN_PARENS     shift and go to state 11

    chip_io                        shift and go to state 10

state 3

    (6) run_command -> RUN . NAME

    NAME            shift and go to state 12


state 4

    (2) chip_instructions -> command .

    NAME            reduce using rule 2 (chip_instructions -> command .)
    RUN             reduce using rule 2 (chip_instructions -> command .)
    $end            reduce using rule 2 (chip_instructions -> command .)


state 5

    (0) S' -> chip_instructions .
    (3) chip_instructions -> chip_instructions . chip_definition
    (4) chip_instructions -> chip_instructions . command
    (8) chip_definition -> . chip_declaration chip_logic
    (5) command -> . run_command
    (9) chip_declaration -> . NAME chip_io CHIP_FUNC_OP chip_io
    (6) run_command -> . RUN NAME
    (7) run_command -> . run_command BINNUM

    NAME            shift and go to state 2
    RUN             shift and go to state 3

    chip_declaration               shift and go to state 1
    command                        shift and go to state 13
    chip_definition                shift and go to state 14
    run_command                    shift and go to state 7

state 6

    (1) chip_instructions -> chip_definition .

    NAME            reduce using rule 1 (chip_instructions -> chip_definition .)
    RUN             reduce using rule 1 (chip_instructions -> chip_definition .)
    $end            reduce using rule 1 (chip_instructions -> chip_definition .)


state 7

    (5) command -> run_command .
    (7) run_command -> run_command . BINNUM

    NAME            reduce using rule 5 (command -> run_command .)
    RUN             reduce using rule 5 (command -> run_command .)
    $end            reduce using rule 5 (command -> run_command .)
    BINNUM          shift and go to state 15


state 8

    (8) chip_definition -> chip_declaration chip_logic .

    NAME            reduce using rule 8 (chip_definition -> chip_declaration chip_logic .)
    RUN             reduce using rule 8 (chip_definition -> chip_declaration chip_logic .)
    $end            reduce using rule 8 (chip_definition -> chip_declaration chip_logic .)


state 9

    (10) chip_logic -> OPEN_BRACE . chip_statements CLOSE_BRACE
    (11) chip_statements -> . chip_statement
    (12) chip_statements -> . chip_statements chip_statement
    (13) chip_statement -> . NAME chip_io CHIP_FUNC_OP chip_io

    NAME            shift and go to state 16

    chip_statement                 shift and go to state 17
    chip_statements                shift and go to state 18

state 10

    (9) chip_declaration -> NAME chip_io . CHIP_FUNC_OP chip_io

    CHIP_FUNC_OP    shift and go to state 19


state 11

    (14) chip_io -> OPEN_PARENS . name_sequence CLOSE_PARENS
    (15) chip_io -> OPEN_PARENS . CLOSE_PARENS
    (16) name_sequence -> . NAME
    (17) name_sequence -> . indexing_name
    (18) name_sequence -> . array_init
    (19) name_sequence -> . name_sequence NAME
    (20) name_sequence -> . name_sequence indexing_name
    (21) name_sequence -> . name_sequence array_init
    (22) indexing_name -> . NAME OPEN_SQUARE NUMBER CLOSE_SQUARE
    (23) indexing_name -> . NAME OPEN_SQUARE NUMBER COLON NUMBER CLOSE_SQUARE
    (24) indexing_name -> . NAME OPEN_SQUARE COLON NUMBER CLOSE_SQUARE
    (25) array_init -> . NAME OPEN_SQUARE DOLLAR NUMBER CLOSE_SQUARE

    CLOSE_PARENS    shift and go to state 24
    NAME            shift and go to state 22

    indexing_name                  shift and go to state 20
    name_sequence                  shift and go to state 21
    array_init                     shift and go to state 23

state 12

    (6) run_command -> RUN NAME .

    BINNUM          reduce using rule 6 (run_command -> RUN NAME .)
    NAME            reduce using rule 6 (run_command -> RUN NAME .)
    RUN             reduce using rule 6 (run_command -> RUN NAME .)
    $end            reduce using rule 6 (run_command -> RUN NAME .)


state 13

    (4) chip_instructions -> chip_instructions command .

    NAME            reduce using rule 4 (chip_instructions -> chip_instructions command .)
    RUN             reduce using rule 4 (chip_instructions -> chip_instructions command .)
    $end            reduce using rule 4 (chip_instructions -> chip_instructions command .)


state 14

    (3) chip_instructions -> chip_instructions chip_definition .

    NAME            reduce using rule 3 (chip_instructions -> chip_instructions chip_definition .)
    RUN             reduce using rule 3 (chip_instructions -> chip_instructions chip_definition .)
    $end            reduce using rule 3 (chip_instructions -> chip_instructions chip_definition .)


state 15

    (7) run_command -> run_command BINNUM .

    BINNUM          reduce using rule 7 (run_command -> run_command BINNUM .)
    NAME            reduce using rule 7 (run_command -> run_command BINNUM .)
    RUN             reduce using rule 7 (run_command -> run_command BINNUM .)
    $end            reduce using rule 7 (run_command -> run_command BINNUM .)


state 16

    (13) chip_statement -> NAME . chip_io CHIP_FUNC_OP chip_io
    (14) chip_io -> . OPEN_PARENS name_sequence CLOSE_PARENS
    (15) chip_io -> . OPEN_PARENS CLOSE_PARENS

    OPEN_PARENS     shift and go to state 11

    chip_io                        shift and go to state 25

state 17

    (11) chip_statements -> chip_statement .

    CLOSE_BRACE     reduce using rule 11 (chip_statements -> chip_statement .)
    NAME            reduce using rule 11 (chip_statements -> chip_statement .)


state 18

    (10) chip_logic -> OPEN_BRACE chip_statements . CLOSE_BRACE
    (12) chip_statements -> chip_statements . chip_statement
    (13) chip_statement -> . NAME chip_io CHIP_FUNC_OP chip_io

    CLOSE_BRACE     shift and go to state 26
    NAME            shift and go to state 16

    chip_statement                 shift and go to state 27

state 19

    (9) chip_declaration -> NAME chip_io CHIP_FUNC_OP . chip_io
    (14) chip_io -> . OPEN_PARENS name_sequence CLOSE_PARENS
    (15) chip_io -> . OPEN_PARENS CLOSE_PARENS

    OPEN_PARENS     shift and go to state 11

    chip_io                        shift and go to state 28

state 20

    (17) name_sequence -> indexing_name .

    CLOSE_PARENS    reduce using rule 17 (name_sequence -> indexing_name .)
    NAME            reduce using rule 17 (name_sequence -> indexing_name .)


state 21

    (14) chip_io -> OPEN_PARENS name_sequence . CLOSE_PARENS
    (19) name_sequence -> name_sequence . NAME
    (20) name_sequence -> name_sequence . indexing_name
    (21) name_sequence -> name_sequence . array_init
    (22) indexing_name -> . NAME OPEN_SQUARE NUMBER CLOSE_SQUARE
    (23) indexing_name -> . NAME OPEN_SQUARE NUMBER COLON NUMBER CLOSE_SQUARE
    (24) indexing_name -> . NAME OPEN_SQUARE COLON NUMBER CLOSE_SQUARE
    (25) array_init -> . NAME OPEN_SQUARE DOLLAR NUMBER CLOSE_SQUARE

    CLOSE_PARENS    shift and go to state 32
    NAME            shift and go to state 30

    indexing_name                  shift and go to state 29
    array_init                     shift and go to state 31

state 22

    (16) name_sequence -> NAME .
    (22) indexing_name -> NAME . OPEN_SQUARE NUMBER CLOSE_SQUARE
    (23) indexing_name -> NAME . OPEN_SQUARE NUMBER COLON NUMBER CLOSE_SQUARE
    (24) indexing_name -> NAME . OPEN_SQUARE COLON NUMBER CLOSE_SQUARE
    (25) array_init -> NAME . OPEN_SQUARE DOLLAR NUMBER CLOSE_SQUARE

    CLOSE_PARENS    reduce using rule 16 (name_sequence -> NAME .)
    NAME            reduce using rule 16 (name_sequence -> NAME .)
    OPEN_SQUARE     shift and go to state 33


state 23

    (18) name_sequence -> array_init .

    CLOSE_PARENS    reduce using rule 18 (name_sequence -> array_init .)
    NAME            reduce using rule 18 (name_sequence -> array_init .)


state 24

    (15) chip_io -> OPEN_PARENS CLOSE_PARENS .

    CHIP_FUNC_OP    reduce using rule 15 (chip_io -> OPEN_PARENS CLOSE_PARENS .)
    OPEN_BRACE      reduce using rule 15 (chip_io -> OPEN_PARENS CLOSE_PARENS .)
    CLOSE_BRACE     reduce using rule 15 (chip_io -> OPEN_PARENS CLOSE_PARENS .)
    NAME            reduce using rule 15 (chip_io -> OPEN_PARENS CLOSE_PARENS .)


state 25

    (13) chip_statement -> NAME chip_io . CHIP_FUNC_OP chip_io

    CHIP_FUNC_OP    shift and go to state 34


state 26

    (10) chip_logic -> OPEN_BRACE chip_statements CLOSE_BRACE .

    NAME            reduce using rule 10 (chip_logic -> OPEN_BRACE chip_statements CLOSE_BRACE .)
    RUN             reduce using rule 10 (chip_logic -> OPEN_BRACE chip_statements CLOSE_BRACE .)
    $end            reduce using rule 10 (chip_logic -> OPEN_BRACE chip_statements CLOSE_BRACE .)


state 27

    (12) chip_statements -> chip_statements chip_statement .

    CLOSE_BRACE     reduce using rule 12 (chip_statements -> chip_statements chip_statement .)
    NAME            reduce using rule 12 (chip_statements -> chip_statements chip_statement .)


state 28

    (9) chip_declaration -> NAME chip_io CHIP_FUNC_OP chip_io .

    OPEN_BRACE      reduce using rule 9 (chip_declaration -> NAME chip_io CHIP_FUNC_OP chip_io .)


state 29

    (20) name_sequence -> name_sequence indexing_name .

    CLOSE_PARENS    reduce using rule 20 (name_sequence -> name_sequence indexing_name .)
    NAME            reduce using rule 20 (name_sequence -> name_sequence indexing_name .)


state 30

    (19) name_sequence -> name_sequence NAME .
    (22) indexing_name -> NAME . OPEN_SQUARE NUMBER CLOSE_SQUARE
    (23) indexing_name -> NAME . OPEN_SQUARE NUMBER COLON NUMBER CLOSE_SQUARE
    (24) indexing_name -> NAME . OPEN_SQUARE COLON NUMBER CLOSE_SQUARE
    (25) array_init -> NAME . OPEN_SQUARE DOLLAR NUMBER CLOSE_SQUARE

    CLOSE_PARENS    reduce using rule 19 (name_sequence -> name_sequence NAME .)
    NAME            reduce using rule 19 (name_sequence -> name_sequence NAME .)
    OPEN_SQUARE     shift and go to state 33


state 31

    (21) name_sequence -> name_sequence array_init .

    CLOSE_PARENS    reduce using rule 21 (name_sequence -> name_sequence array_init .)
    NAME            reduce using rule 21 (name_sequence -> name_sequence array_init .)


state 32

    (14) chip_io -> OPEN_PARENS name_sequence CLOSE_PARENS .

    CHIP_FUNC_OP    reduce using rule 14 (chip_io -> OPEN_PARENS name_sequence CLOSE_PARENS .)
    OPEN_BRACE      reduce using rule 14 (chip_io -> OPEN_PARENS name_sequence CLOSE_PARENS .)
    CLOSE_BRACE     reduce using rule 14 (chip_io -> OPEN_PARENS name_sequence CLOSE_PARENS .)
    NAME            reduce using rule 14 (chip_io -> OPEN_PARENS name_sequence CLOSE_PARENS .)


state 33

    (22) indexing_name -> NAME OPEN_SQUARE . NUMBER CLOSE_SQUARE
    (23) indexing_name -> NAME OPEN_SQUARE . NUMBER COLON NUMBER CLOSE_SQUARE
    (24) indexing_name -> NAME OPEN_SQUARE . COLON NUMBER CLOSE_SQUARE
    (25) array_init -> NAME OPEN_SQUARE . DOLLAR NUMBER CLOSE_SQUARE

    NUMBER          shift and go to state 36
    COLON           shift and go to state 35
    DOLLAR          shift and go to state 37


state 34

    (13) chip_statement -> NAME chip_io CHIP_FUNC_OP . chip_io
    (14) chip_io -> . OPEN_PARENS name_sequence CLOSE_PARENS
    (15) chip_io -> . OPEN_PARENS CLOSE_PARENS

    OPEN_PARENS     shift and go to state 11

    chip_io                        shift and go to state 38

state 35

    (24) indexing_name -> NAME OPEN_SQUARE COLON . NUMBER CLOSE_SQUARE

    NUMBER          shift and go to state 39


state 36

    (22) indexing_name -> NAME OPEN_SQUARE NUMBER . CLOSE_SQUARE
    (23) indexing_name -> NAME OPEN_SQUARE NUMBER . COLON NUMBER CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 41
    COLON           shift and go to state 40


state 37

    (25) array_init -> NAME OPEN_SQUARE DOLLAR . NUMBER CLOSE_SQUARE

    NUMBER          shift and go to state 42


state 38

    (13) chip_statement -> NAME chip_io CHIP_FUNC_OP chip_io .

    CLOSE_BRACE     reduce using rule 13 (chip_statement -> NAME chip_io CHIP_FUNC_OP chip_io .)
    NAME            reduce using rule 13 (chip_statement -> NAME chip_io CHIP_FUNC_OP chip_io .)


state 39

    (24) indexing_name -> NAME OPEN_SQUARE COLON NUMBER . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 43


state 40

    (23) indexing_name -> NAME OPEN_SQUARE NUMBER COLON . NUMBER CLOSE_SQUARE

    NUMBER          shift and go to state 44


state 41

    (22) indexing_name -> NAME OPEN_SQUARE NUMBER CLOSE_SQUARE .

    CLOSE_PARENS    reduce using rule 22 (indexing_name -> NAME OPEN_SQUARE NUMBER CLOSE_SQUARE .)
    NAME            reduce using rule 22 (indexing_name -> NAME OPEN_SQUARE NUMBER CLOSE_SQUARE .)


state 42

    (25) array_init -> NAME OPEN_SQUARE DOLLAR NUMBER . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 45


state 43

    (24) indexing_name -> NAME OPEN_SQUARE COLON NUMBER CLOSE_SQUARE .

    CLOSE_PARENS    reduce using rule 24 (indexing_name -> NAME OPEN_SQUARE COLON NUMBER CLOSE_SQUARE .)
    NAME            reduce using rule 24 (indexing_name -> NAME OPEN_SQUARE COLON NUMBER CLOSE_SQUARE .)


state 44

    (23) indexing_name -> NAME OPEN_SQUARE NUMBER COLON NUMBER . CLOSE_SQUARE

    CLOSE_SQUARE    shift and go to state 46


state 45

    (25) array_init -> NAME OPEN_SQUARE DOLLAR NUMBER CLOSE_SQUARE .

    CLOSE_PARENS    reduce using rule 25 (array_init -> NAME OPEN_SQUARE DOLLAR NUMBER CLOSE_SQUARE .)
    NAME            reduce using rule 25 (array_init -> NAME OPEN_SQUARE DOLLAR NUMBER CLOSE_SQUARE .)


state 46

    (23) indexing_name -> NAME OPEN_SQUARE NUMBER COLON NUMBER CLOSE_SQUARE .

    CLOSE_PARENS    reduce using rule 23 (indexing_name -> NAME OPEN_SQUARE NUMBER COLON NUMBER CLOSE_SQUARE .)
    NAME            reduce using rule 23 (indexing_name -> NAME OPEN_SQUARE NUMBER COLON NUMBER CLOSE_SQUARE .)

