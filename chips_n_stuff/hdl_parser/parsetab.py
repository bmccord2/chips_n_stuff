
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NAME CHIP_FUNC_OP OPEN_PARENS CLOSE_PARENS OPEN_BRACE CLOSE_BRACE OPEN_SQUARE CLOSE_SQUARE BOOLEAN RUN\n    chip_instructions : chip_definition\n                      | command\n    \n    chip_instructions : chip_instructions chip_definition\n                      | chip_instructions command\n    \n    command : run_command\n    \n    run_command : RUN NAME\n    \n    run_command : run_command BOOLEAN\n    \n    chip_definition : chip_declaration chip_logic\n    \n    chip_declaration : NAME chip_io CHIP_FUNC_OP chip_io\n    \n    chip_logic : OPEN_BRACE chip_statements CLOSE_BRACE\n    \n    chip_io : OPEN_PARENS name_sequence CLOSE_PARENS\n    \n    chip_io : OPEN_PARENS CLOSE_PARENS\n    \n    name_sequence : NAME\n    \n    name_sequence : name_sequence NAME\n    \n    chip_statements : chip_statement\n    \n    chip_statements : chip_statements chip_statement\n    \n    chip_statement : NAME chip_statement_io chip_statement_io \n    \n    chip_statement_io : OPEN_SQUARE name_sequence CLOSE_SQUARE\n    \n    chip_statement_io : OPEN_SQUARE CLOSE_SQUARE\n    '
    
_lr_action_items = {'$end':([1,2,3,5,8,9,10,13,14,27,],[-5,-2,0,-1,-7,-4,-3,-6,-8,-10,]),'CLOSE_PARENS':([12,17,19,24,],[18,-13,25,-14,]),'OPEN_SQUARE':([22,29,30,33,],[28,28,-19,-18,]),'CLOSE_SQUARE':([17,24,28,31,],[-13,-14,30,33,]),'CLOSE_BRACE':([20,21,26,30,32,33,],[-15,27,-16,-19,-17,-18,]),'NAME':([0,1,2,3,5,6,8,9,10,12,13,14,15,17,19,20,21,24,26,27,28,30,31,32,33,],[4,-5,-2,4,-1,13,-7,-4,-3,17,-6,-8,22,-13,24,-15,22,-14,-16,-10,17,-19,24,-17,-18,]),'OPEN_BRACE':([7,18,23,25,],[15,-12,-9,-11,]),'BOOLEAN':([1,8,13,],[8,-7,-6,]),'RUN':([0,1,2,3,5,8,9,10,13,14,27,],[6,-5,-2,6,-1,-7,-4,-3,-6,-8,-10,]),'CHIP_FUNC_OP':([11,18,25,],[16,-12,-11,]),'OPEN_PARENS':([4,16,],[12,12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'run_command':([0,3,],[1,1,]),'chip_statement':([15,21,],[20,26,]),'chip_logic':([7,],[14,]),'command':([0,3,],[2,9,]),'chip_instructions':([0,],[3,]),'chip_statement_io':([22,29,],[29,32,]),'chip_statements':([15,],[21,]),'chip_definition':([0,3,],[5,10,]),'chip_io':([4,16,],[11,23,]),'name_sequence':([12,28,],[19,31,]),'chip_declaration':([0,3,],[7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> chip_instructions","S'",1,None,None,None),
  ('chip_instructions -> chip_definition','chip_instructions',1,'p_instructions_1','hdl_parser.py',62),
  ('chip_instructions -> command','chip_instructions',1,'p_instructions_1','hdl_parser.py',63),
  ('chip_instructions -> chip_instructions chip_definition','chip_instructions',2,'p_instructions_2','hdl_parser.py',69),
  ('chip_instructions -> chip_instructions command','chip_instructions',2,'p_instructions_2','hdl_parser.py',70),
  ('command -> run_command','command',1,'p_command','hdl_parser.py',77),
  ('run_command -> RUN NAME','run_command',2,'p_run_command_1','hdl_parser.py',83),
  ('run_command -> run_command BOOLEAN','run_command',2,'p_run_command_2','hdl_parser.py',89),
  ('chip_definition -> chip_declaration chip_logic','chip_definition',2,'p_chip_definition','hdl_parser.py',108),
  ('chip_declaration -> NAME chip_io CHIP_FUNC_OP chip_io','chip_declaration',4,'p_chip_declaration','hdl_parser.py',114),
  ('chip_logic -> OPEN_BRACE chip_statements CLOSE_BRACE','chip_logic',3,'p_chip_logic','hdl_parser.py',120),
  ('chip_io -> OPEN_PARENS name_sequence CLOSE_PARENS','chip_io',3,'p_chip_io_1','hdl_parser.py',126),
  ('chip_io -> OPEN_PARENS CLOSE_PARENS','chip_io',2,'p_chip_io_2','hdl_parser.py',132),
  ('name_sequence -> NAME','name_sequence',1,'p_name_sequence_1','hdl_parser.py',138),
  ('name_sequence -> name_sequence NAME','name_sequence',2,'p_name_sequence_2','hdl_parser.py',144),
  ('chip_statements -> chip_statement','chip_statements',1,'p_chip_statements_1','hdl_parser.py',150),
  ('chip_statements -> chip_statements chip_statement','chip_statements',2,'p_chip_statements_2','hdl_parser.py',156),
  ('chip_statement -> NAME chip_statement_io chip_statement_io','chip_statement',3,'p_chip_statement','hdl_parser.py',162),
  ('chip_statement_io -> OPEN_SQUARE name_sequence CLOSE_SQUARE','chip_statement_io',3,'p_chip_statement_io_1','hdl_parser.py',168),
  ('chip_statement_io -> OPEN_SQUARE CLOSE_SQUARE','chip_statement_io',2,'p_chip_statement_io_2','hdl_parser.py',174),
]
